#Runtime ~4.3s.

"""
As hinted in the question, each diagonal can be generated by a quadratic polynomial.
One should note that, taking the top-right diagonal for example, {1, 3, 13, 31, 57, 91} has differences {2, 10, 18, 26, 34, 42} which has differences {8, 8, 8, 8, 8}.
Therefore it is generated by a polynomial 4n^2 + an + b where by setting n = 0 and n = 1 we get b = 1 and a = -2, respectively.
Similarly the top-left and bottom-left diagonals are given by 4n^2 + 1 and 4n^2 + 2n + 1, respectively.
"""

def prime_check(cand):
    if cand == 0: return False
    if cand == 1: return False
    for n in range(2, int(cand**(0.5) + 1)):
        if cand % n == 0: return False
    return True

def f(n, a, b):
    return 4*n**2 + a*n + b

prime_count, composite_count, n = 0, 1, 1
while True:
    composite_count += 1    #Odd squares are never prime.
    for a in [-2, 0, 2]:
        if prime_check(f(n, a, 1)): prime_count += 1
        else: composite_count += 1
    if prime_count / (prime_count + composite_count) < 0.1:
        break
    n += 1

print(2*n + 1)
